name: docker-cicd-pr

on:
  pull_request:
    branches:
      - main

# CI/CD Events
# - actions checkout
# - setup python
# - install devtools
# - install dependencies
# - python lint
# - python test
# - pr post
# - cicd failure exit if failed

jobs:
  pipeline:
    name: docker-cicd-pr
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install devtools
        run: |
          python -m pip install --upgrade pip && pip install poetry

      - name: Install dependencies
        run: make install

      - name: lint
        id: lint
        run: |
          echo "lint<<EOF"       >> $GITHUB_ENV
          trap 'echo "EOF"       >> $GITHUB_ENV' EXIT
          make lint | grep -v \` >> $GITHUB_ENV
        continue-on-error: true

      - name: test
        id: test
        run: |
          echo "test<<EOF"           >> $GITHUB_ENV
          trap 'echo "EOF"           >> $GITHUB_ENV' EXIT
          make test-all | grep -v \` >> $GITHUB_ENV
        continue-on-error: true

      - name: CI/CD Pipeline's Result PR Post
        uses: actions/github-script@v6
        env:
          STATUS: "${{ (steps.lint.outcome == 'failure' || steps.test.outcome == 'failure') && ':broken_heart: :boom: :cold_sweat: Some failed!' || ':white_check_mark: :tada: :smile: All passed!' }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const env = process.env
            const output = `
            ## CI/CD Pipeline's Result

            ${env.STATUS}

            | step         | result                     |
            |:-------------|:--------------------------:|
            | :robot: Python Lint | ${{ steps.lint.outcome }} |
            | :eyes: Python Test | ${{ steps.test.outcome }} |

            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: CI/CD Pipeline Failure Exit
        if: ${{ (steps.lint.outcome == 'failure' || steps.test.outcome == 'failure') }}
        run: exit 1
